//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GameSetup.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class GameSetupParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INITIALISE=1, FINALISE=2, GAMETYPE=3, PC=4, NUM=5, DIFFICULTY=6, SKILLLEVEL=7, 
		SKILLSET=8, DUNGEON=9, PLATFORMER=10, MAP=11, SIZE=12, ENEMY=13, ATTACKSTYLE=14, 
		INT=15, NEWLINE=16, WS=17;
	public const int
		RULE_prog = 0, RULE_elem = 1, RULE_initialiseGame = 2, RULE_defineGame = 3, 
		RULE_createPlayer = 4, RULE_createEnemies = 5, RULE_finishGameSetup = 6;
	public static readonly string[] ruleNames = {
		"prog", "elem", "initialiseGame", "defineGame", "createPlayer", "createEnemies", 
		"finishGameSetup"
	};

	private static readonly string[] _LiteralNames = {
		null, "'initialise'", "'finalise'", null, "'players'", null, "'difficulty'", 
		null, null, "'dungeon'", "'platformer'", "'map'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INITIALISE", "FINALISE", "GAMETYPE", "PC", "NUM", "DIFFICULTY", 
		"SKILLLEVEL", "SKILLSET", "DUNGEON", "PLATFORMER", "MAP", "SIZE", "ENEMY", 
		"ATTACKSTYLE", "INT", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GameSetup.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GameSetupParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


		public GameCompiler Compiler = new GameCompiler(); //the specific compiler file in the Unity project

		public GameSetupParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GameSetupParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		public ElemContext[] elem() {
			return GetRuleContexts<ElemContext>();
		}
		public ElemContext elem(int i) {
			return GetRuleContext<ElemContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGameSetupListener typedListener = listener as IGameSetupListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGameSetupListener typedListener = listener as IGameSetupListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 14; elem();
				}
				}
				State = 17;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INITIALISE) | (1L << FINALISE) | (1L << GAMETYPE) | (1L << PC) | (1L << ATTACKSTYLE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElemContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(GameSetupParser.NEWLINE, 0); }
		public InitialiseGameContext initialiseGame() {
			return GetRuleContext<InitialiseGameContext>(0);
		}
		public DefineGameContext defineGame() {
			return GetRuleContext<DefineGameContext>(0);
		}
		public CreatePlayerContext createPlayer() {
			return GetRuleContext<CreatePlayerContext>(0);
		}
		public CreateEnemiesContext createEnemies() {
			return GetRuleContext<CreateEnemiesContext>(0);
		}
		public FinishGameSetupContext finishGameSetup() {
			return GetRuleContext<FinishGameSetupContext>(0);
		}
		public ElemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGameSetupListener typedListener = listener as IGameSetupListener;
			if (typedListener != null) typedListener.EnterElem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGameSetupListener typedListener = listener as IGameSetupListener;
			if (typedListener != null) typedListener.ExitElem(this);
		}
	}

	[RuleVersion(0)]
	public ElemContext elem() {
		ElemContext _localctx = new ElemContext(Context, State);
		EnterRule(_localctx, 2, RULE_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INITIALISE:
				{
				State = 19; initialiseGame();
				}
				break;
			case GAMETYPE:
				{
				State = 20; defineGame();
				}
				break;
			case PC:
				{
				State = 21; createPlayer();
				}
				break;
			case ATTACKSTYLE:
				{
				State = 22; createEnemies();
				}
				break;
			case FINALISE:
				{
				State = 23; finishGameSetup();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 26; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialiseGameContext : ParserRuleContext {
		public ITerminalNode INITIALISE() { return GetToken(GameSetupParser.INITIALISE, 0); }
		public InitialiseGameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialiseGame; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGameSetupListener typedListener = listener as IGameSetupListener;
			if (typedListener != null) typedListener.EnterInitialiseGame(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGameSetupListener typedListener = listener as IGameSetupListener;
			if (typedListener != null) typedListener.ExitInitialiseGame(this);
		}
	}

	[RuleVersion(0)]
	public InitialiseGameContext initialiseGame() {
		InitialiseGameContext _localctx = new InitialiseGameContext(Context, State);
		EnterRule(_localctx, 4, RULE_initialiseGame);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; Match(INITIALISE);
			 Compiler.InitialiseGame(); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefineGameContext : ParserRuleContext {
		public IToken _GAMETYPE;
		public IToken _SKILLLEVEL;
		public IToken _SIZE;
		public ITerminalNode GAMETYPE() { return GetToken(GameSetupParser.GAMETYPE, 0); }
		public ITerminalNode SKILLLEVEL() { return GetToken(GameSetupParser.SKILLLEVEL, 0); }
		public ITerminalNode DIFFICULTY() { return GetToken(GameSetupParser.DIFFICULTY, 0); }
		public ITerminalNode SIZE() { return GetToken(GameSetupParser.SIZE, 0); }
		public DefineGameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defineGame; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGameSetupListener typedListener = listener as IGameSetupListener;
			if (typedListener != null) typedListener.EnterDefineGame(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGameSetupListener typedListener = listener as IGameSetupListener;
			if (typedListener != null) typedListener.ExitDefineGame(this);
		}
	}

	[RuleVersion(0)]
	public DefineGameContext defineGame() {
		DefineGameContext _localctx = new DefineGameContext(Context, State);
		EnterRule(_localctx, 6, RULE_defineGame);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31; _localctx._GAMETYPE = Match(GAMETYPE);
			State = 32; _localctx._SKILLLEVEL = Match(SKILLLEVEL);
			State = 33; Match(DIFFICULTY);
			State = 34; _localctx._SIZE = Match(SIZE);
			 Compiler.DefineGame((_localctx._GAMETYPE!=null?_localctx._GAMETYPE.Text:null), (_localctx._SKILLLEVEL!=null?_localctx._SKILLLEVEL.Text:null), (_localctx._SIZE!=null?_localctx._SIZE.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatePlayerContext : ParserRuleContext {
		public IToken _NUM;
		public ITerminalNode PC() { return GetToken(GameSetupParser.PC, 0); }
		public ITerminalNode NUM() { return GetToken(GameSetupParser.NUM, 0); }
		public CreatePlayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createPlayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGameSetupListener typedListener = listener as IGameSetupListener;
			if (typedListener != null) typedListener.EnterCreatePlayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGameSetupListener typedListener = listener as IGameSetupListener;
			if (typedListener != null) typedListener.ExitCreatePlayer(this);
		}
	}

	[RuleVersion(0)]
	public CreatePlayerContext createPlayer() {
		CreatePlayerContext _localctx = new CreatePlayerContext(Context, State);
		EnterRule(_localctx, 8, RULE_createPlayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; Match(PC);
			State = 38; _localctx._NUM = Match(NUM);
			 Compiler.CreatePlayer((_localctx._NUM!=null?_localctx._NUM.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateEnemiesContext : ParserRuleContext {
		public IToken _ATTACKSTYLE;
		public ITerminalNode ATTACKSTYLE() { return GetToken(GameSetupParser.ATTACKSTYLE, 0); }
		public ITerminalNode ENEMY() { return GetToken(GameSetupParser.ENEMY, 0); }
		public CreateEnemiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createEnemies; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGameSetupListener typedListener = listener as IGameSetupListener;
			if (typedListener != null) typedListener.EnterCreateEnemies(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGameSetupListener typedListener = listener as IGameSetupListener;
			if (typedListener != null) typedListener.ExitCreateEnemies(this);
		}
	}

	[RuleVersion(0)]
	public CreateEnemiesContext createEnemies() {
		CreateEnemiesContext _localctx = new CreateEnemiesContext(Context, State);
		EnterRule(_localctx, 10, RULE_createEnemies);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; _localctx._ATTACKSTYLE = Match(ATTACKSTYLE);
			State = 42; Match(ENEMY);
			 Compiler.CreateEnemy((_localctx._ATTACKSTYLE!=null?_localctx._ATTACKSTYLE.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinishGameSetupContext : ParserRuleContext {
		public ITerminalNode FINALISE() { return GetToken(GameSetupParser.FINALISE, 0); }
		public FinishGameSetupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finishGameSetup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGameSetupListener typedListener = listener as IGameSetupListener;
			if (typedListener != null) typedListener.EnterFinishGameSetup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGameSetupListener typedListener = listener as IGameSetupListener;
			if (typedListener != null) typedListener.ExitFinishGameSetup(this);
		}
	}

	[RuleVersion(0)]
	public FinishGameSetupContext finishGameSetup() {
		FinishGameSetupContext _localctx = new FinishGameSetupContext(Context, State);
		EnterRule(_localctx, 12, RULE_finishGameSetup);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; Match(FINALISE);
			 Compiler.FinishSetup(); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x13', '\x33', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x3', '\x2', '\x6', '\x2', '\x12', '\n', '\x2', '\r', '\x2', '\xE', '\x2', 
		'\x13', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x1B', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x2', '\x2', '\t', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x2', 
		'\x2', '\x2', '\x30', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '\b', '!', '\x3', '\x2', '\x2', '\x2', '\n', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\f', '+', '\x3', '\x2', '\x2', '\x2', '\xE', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x12', '\x5', '\x4', '\x3', '\x2', '\x11', 
		'\x10', '\x3', '\x2', '\x2', '\x2', '\x12', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x13', '\x11', '\x3', '\x2', '\x2', '\x2', '\x13', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x3', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'\x1B', '\x5', '\x6', '\x4', '\x2', '\x16', '\x1B', '\x5', '\b', '\x5', 
		'\x2', '\x17', '\x1B', '\x5', '\n', '\x6', '\x2', '\x18', '\x1B', '\x5', 
		'\f', '\a', '\x2', '\x19', '\x1B', '\x5', '\xE', '\b', '\x2', '\x1A', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x16', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x17', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x18', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\a', '\x12', '\x2', 
		'\x2', '\x1D', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\a', 
		'\x3', '\x2', '\x2', '\x1F', ' ', '\b', '\x4', '\x1', '\x2', ' ', '\a', 
		'\x3', '\x2', '\x2', '\x2', '!', '\"', '\a', '\x5', '\x2', '\x2', '\"', 
		'#', '\a', '\t', '\x2', '\x2', '#', '$', '\a', '\b', '\x2', '\x2', '$', 
		'%', '\a', '\xE', '\x2', '\x2', '%', '&', '\b', '\x5', '\x1', '\x2', '&', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '\x6', '\x2', '\x2', 
		'(', ')', '\a', '\a', '\x2', '\x2', ')', '*', '\b', '\x6', '\x1', '\x2', 
		'*', '\v', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', '\x10', '\x2', 
		'\x2', ',', '-', '\a', '\xF', '\x2', '\x2', '-', '.', '\b', '\a', '\x1', 
		'\x2', '.', '\r', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', '\x4', 
		'\x2', '\x2', '\x30', '\x31', '\b', '\b', '\x1', '\x2', '\x31', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x13', '\x1A',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
