//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PlatformerMap.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class PlatformerMapParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		START=1, FLATPATH=2, LOWPLATFORM=3, HIGHPLATFORM=4, PATHGAP=5, FINISHLINE=6, 
		INT=7, NEWLINE=8, WS=9;
	public const int
		RULE_prog = 0, RULE_elem = 1, RULE_addStartSegment = 2, RULE_addFlatPathSegment = 3, 
		RULE_addLowPlatformSegment = 4, RULE_addHighPlatformSegment = 5, RULE_addPathGapSegment = 6, 
		RULE_addFinishLineSegment = 7;
	public static readonly string[] ruleNames = {
		"prog", "elem", "addStartSegment", "addFlatPathSegment", "addLowPlatformSegment", 
		"addHighPlatformSegment", "addPathGapSegment", "addFinishLineSegment"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "START", "FLATPATH", "LOWPLATFORM", "HIGHPLATFORM", "PATHGAP", "FINISHLINE", 
		"INT", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PlatformerMap.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PlatformerMapParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


		public PlatformerCompiler Compiler = new PlatformerCompiler(); //this will be the compiler file in the Unity project

		public PlatformerMapParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public PlatformerMapParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		public ElemContext[] elem() {
			return GetRuleContexts<ElemContext>();
		}
		public ElemContext elem(int i) {
			return GetRuleContext<ElemContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPlatformerMapListener typedListener = listener as IPlatformerMapListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlatformerMapListener typedListener = listener as IPlatformerMapListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 16; elem();
				}
				}
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << START) | (1L << FLATPATH) | (1L << LOWPLATFORM) | (1L << HIGHPLATFORM) | (1L << PATHGAP) | (1L << FINISHLINE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElemContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(PlatformerMapParser.NEWLINE, 0); }
		public AddStartSegmentContext addStartSegment() {
			return GetRuleContext<AddStartSegmentContext>(0);
		}
		public AddFlatPathSegmentContext addFlatPathSegment() {
			return GetRuleContext<AddFlatPathSegmentContext>(0);
		}
		public AddLowPlatformSegmentContext addLowPlatformSegment() {
			return GetRuleContext<AddLowPlatformSegmentContext>(0);
		}
		public AddHighPlatformSegmentContext addHighPlatformSegment() {
			return GetRuleContext<AddHighPlatformSegmentContext>(0);
		}
		public AddPathGapSegmentContext addPathGapSegment() {
			return GetRuleContext<AddPathGapSegmentContext>(0);
		}
		public AddFinishLineSegmentContext addFinishLineSegment() {
			return GetRuleContext<AddFinishLineSegmentContext>(0);
		}
		public ElemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPlatformerMapListener typedListener = listener as IPlatformerMapListener;
			if (typedListener != null) typedListener.EnterElem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlatformerMapListener typedListener = listener as IPlatformerMapListener;
			if (typedListener != null) typedListener.ExitElem(this);
		}
	}

	[RuleVersion(0)]
	public ElemContext elem() {
		ElemContext _localctx = new ElemContext(Context, State);
		EnterRule(_localctx, 2, RULE_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case START:
				{
				State = 21; addStartSegment();
				}
				break;
			case FLATPATH:
				{
				State = 22; addFlatPathSegment();
				}
				break;
			case LOWPLATFORM:
				{
				State = 23; addLowPlatformSegment();
				}
				break;
			case HIGHPLATFORM:
				{
				State = 24; addHighPlatformSegment();
				}
				break;
			case PATHGAP:
				{
				State = 25; addPathGapSegment();
				}
				break;
			case FINISHLINE:
				{
				State = 26; addFinishLineSegment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 29; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddStartSegmentContext : ParserRuleContext {
		public ITerminalNode START() { return GetToken(PlatformerMapParser.START, 0); }
		public AddStartSegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addStartSegment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPlatformerMapListener typedListener = listener as IPlatformerMapListener;
			if (typedListener != null) typedListener.EnterAddStartSegment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlatformerMapListener typedListener = listener as IPlatformerMapListener;
			if (typedListener != null) typedListener.ExitAddStartSegment(this);
		}
	}

	[RuleVersion(0)]
	public AddStartSegmentContext addStartSegment() {
		AddStartSegmentContext _localctx = new AddStartSegmentContext(Context, State);
		EnterRule(_localctx, 4, RULE_addStartSegment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31; Match(START);
			 Compiler.CreatePathStart(); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddFlatPathSegmentContext : ParserRuleContext {
		public ITerminalNode FLATPATH() { return GetToken(PlatformerMapParser.FLATPATH, 0); }
		public AddFlatPathSegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addFlatPathSegment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPlatformerMapListener typedListener = listener as IPlatformerMapListener;
			if (typedListener != null) typedListener.EnterAddFlatPathSegment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlatformerMapListener typedListener = listener as IPlatformerMapListener;
			if (typedListener != null) typedListener.ExitAddFlatPathSegment(this);
		}
	}

	[RuleVersion(0)]
	public AddFlatPathSegmentContext addFlatPathSegment() {
		AddFlatPathSegmentContext _localctx = new AddFlatPathSegmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_addFlatPathSegment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; Match(FLATPATH);
			 Compiler.CreateFlatPath(); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddLowPlatformSegmentContext : ParserRuleContext {
		public ITerminalNode LOWPLATFORM() { return GetToken(PlatformerMapParser.LOWPLATFORM, 0); }
		public AddLowPlatformSegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addLowPlatformSegment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPlatformerMapListener typedListener = listener as IPlatformerMapListener;
			if (typedListener != null) typedListener.EnterAddLowPlatformSegment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlatformerMapListener typedListener = listener as IPlatformerMapListener;
			if (typedListener != null) typedListener.ExitAddLowPlatformSegment(this);
		}
	}

	[RuleVersion(0)]
	public AddLowPlatformSegmentContext addLowPlatformSegment() {
		AddLowPlatformSegmentContext _localctx = new AddLowPlatformSegmentContext(Context, State);
		EnterRule(_localctx, 8, RULE_addLowPlatformSegment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; Match(LOWPLATFORM);
			 Compiler.CreateLowPlatform(); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddHighPlatformSegmentContext : ParserRuleContext {
		public ITerminalNode HIGHPLATFORM() { return GetToken(PlatformerMapParser.HIGHPLATFORM, 0); }
		public AddHighPlatformSegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addHighPlatformSegment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPlatformerMapListener typedListener = listener as IPlatformerMapListener;
			if (typedListener != null) typedListener.EnterAddHighPlatformSegment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlatformerMapListener typedListener = listener as IPlatformerMapListener;
			if (typedListener != null) typedListener.ExitAddHighPlatformSegment(this);
		}
	}

	[RuleVersion(0)]
	public AddHighPlatformSegmentContext addHighPlatformSegment() {
		AddHighPlatformSegmentContext _localctx = new AddHighPlatformSegmentContext(Context, State);
		EnterRule(_localctx, 10, RULE_addHighPlatformSegment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(HIGHPLATFORM);
			 Compiler.CreateHighPlatform(); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddPathGapSegmentContext : ParserRuleContext {
		public ITerminalNode PATHGAP() { return GetToken(PlatformerMapParser.PATHGAP, 0); }
		public AddPathGapSegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addPathGapSegment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPlatformerMapListener typedListener = listener as IPlatformerMapListener;
			if (typedListener != null) typedListener.EnterAddPathGapSegment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlatformerMapListener typedListener = listener as IPlatformerMapListener;
			if (typedListener != null) typedListener.ExitAddPathGapSegment(this);
		}
	}

	[RuleVersion(0)]
	public AddPathGapSegmentContext addPathGapSegment() {
		AddPathGapSegmentContext _localctx = new AddPathGapSegmentContext(Context, State);
		EnterRule(_localctx, 12, RULE_addPathGapSegment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43; Match(PATHGAP);
			 Compiler.CreatePathGap(); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddFinishLineSegmentContext : ParserRuleContext {
		public ITerminalNode FINISHLINE() { return GetToken(PlatformerMapParser.FINISHLINE, 0); }
		public AddFinishLineSegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addFinishLineSegment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IPlatformerMapListener typedListener = listener as IPlatformerMapListener;
			if (typedListener != null) typedListener.EnterAddFinishLineSegment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IPlatformerMapListener typedListener = listener as IPlatformerMapListener;
			if (typedListener != null) typedListener.ExitAddFinishLineSegment(this);
		}
	}

	[RuleVersion(0)]
	public AddFinishLineSegmentContext addFinishLineSegment() {
		AddFinishLineSegmentContext _localctx = new AddFinishLineSegmentContext(Context, State);
		EnterRule(_localctx, 14, RULE_addFinishLineSegment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(FINISHLINE);
			 Compiler.CreateFinishLine(); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\v', '\x34', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x3', '\x2', '\x6', '\x2', '\x14', '\n', '\x2', 
		'\r', '\x2', '\xE', '\x2', '\x15', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1E', 
		'\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x2', '\x2', '\n', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x2', '\x2', '\x2', '\x31', '\x2', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x6', '!', '\x3', '\x2', 
		'\x2', '\x2', '\b', '$', '\x3', '\x2', '\x2', '\x2', '\n', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\f', '*', '\x3', '\x2', '\x2', '\x2', '\xE', '-', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '\x14', '\x5', '\x4', '\x3', '\x2', '\x13', '\x12', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x15', '\x3', '\x2', '\x2', '\x2', '\x15', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x15', '\x16', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x3', '\x3', '\x2', '\x2', '\x2', '\x17', '\x1E', '\x5', '\x6', 
		'\x4', '\x2', '\x18', '\x1E', '\x5', '\b', '\x5', '\x2', '\x19', '\x1E', 
		'\x5', '\n', '\x6', '\x2', '\x1A', '\x1E', '\x5', '\f', '\a', '\x2', '\x1B', 
		'\x1E', '\x5', '\xE', '\b', '\x2', '\x1C', '\x1E', '\x5', '\x10', '\t', 
		'\x2', '\x1D', '\x17', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x18', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', ' ', '\a', '\n', '\x2', '\x2', ' ', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '!', '\"', '\a', '\x3', '\x2', '\x2', '\"', 
		'#', '\b', '\x4', '\x1', '\x2', '#', '\a', '\x3', '\x2', '\x2', '\x2', 
		'$', '%', '\a', '\x4', '\x2', '\x2', '%', '&', '\b', '\x5', '\x1', '\x2', 
		'&', '\t', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '\x5', '\x2', 
		'\x2', '(', ')', '\b', '\x6', '\x1', '\x2', ')', '\v', '\x3', '\x2', '\x2', 
		'\x2', '*', '+', '\a', '\x6', '\x2', '\x2', '+', ',', '\b', '\a', '\x1', 
		'\x2', ',', '\r', '\x3', '\x2', '\x2', '\x2', '-', '.', '\a', '\a', '\x2', 
		'\x2', '.', '/', '\b', '\b', '\x1', '\x2', '/', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x31', '\a', '\b', '\x2', '\x2', '\x31', '\x32', '\b', 
		'\t', '\x1', '\x2', '\x32', '\x11', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x15', '\x1D',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
