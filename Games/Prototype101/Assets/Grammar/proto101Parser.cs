//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from proto101.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class proto101Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INITIALISE=1, GAMETYPE=2, PC=3, NUM=4, DIFFICULTY=5, SKILLLEVEL=6, SKILLSET=7, 
		DUNGEON=8, PLATFORMER=9, MAP=10, SIZE=11, ENEMY=12, ATTACKSTYLE=13, START=14, 
		FLATPATH=15, LOWPLATFORM=16, HIGHPLATFORM=17, PATHGAP=18, FINISHLINE=19, 
		INT=20, NEWLINE=21, WS=22;
	public const int
		RULE_prog = 0, RULE_elem = 1, RULE_initialiseGame = 2, RULE_defineGame = 3, 
		RULE_createPlayer = 4, RULE_createDungeon = 5, RULE_createEnemies = 6, 
		RULE_addStartSegment = 7, RULE_addFlatPathSegment = 8, RULE_addLowPlatformSegment = 9, 
		RULE_addHighPlatformSegment = 10, RULE_addPathGapSegment = 11, RULE_addFinishLineSegment = 12;
	public static readonly string[] ruleNames = {
		"prog", "elem", "initialiseGame", "defineGame", "createPlayer", "createDungeon", 
		"createEnemies", "addStartSegment", "addFlatPathSegment", "addLowPlatformSegment", 
		"addHighPlatformSegment", "addPathGapSegment", "addFinishLineSegment"
	};

	private static readonly string[] _LiteralNames = {
		null, "'initialise'", null, "'players'", null, "'difficulty'", null, null, 
		"'dungeon'", "'platformer'", "'map'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INITIALISE", "GAMETYPE", "PC", "NUM", "DIFFICULTY", "SKILLLEVEL", 
		"SKILLSET", "DUNGEON", "PLATFORMER", "MAP", "SIZE", "ENEMY", "ATTACKSTYLE", 
		"START", "FLATPATH", "LOWPLATFORM", "HIGHPLATFORM", "PATHGAP", "FINISHLINE", 
		"INT", "NEWLINE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "proto101.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static proto101Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


		public PrototypeCompiler Compiler = new PrototypeCompiler(); //this will be the compiler file in the Unity project

		public proto101Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public proto101Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		public ElemContext[] elem() {
			return GetRuleContexts<ElemContext>();
		}
		public ElemContext elem(int i) {
			return GetRuleContext<ElemContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 26; elem();
				}
				}
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INITIALISE) | (1L << GAMETYPE) | (1L << PC) | (1L << DUNGEON) | (1L << ATTACKSTYLE) | (1L << START) | (1L << FLATPATH) | (1L << LOWPLATFORM) | (1L << HIGHPLATFORM) | (1L << PATHGAP) | (1L << FINISHLINE))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElemContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(proto101Parser.NEWLINE, 0); }
		public InitialiseGameContext initialiseGame() {
			return GetRuleContext<InitialiseGameContext>(0);
		}
		public DefineGameContext defineGame() {
			return GetRuleContext<DefineGameContext>(0);
		}
		public CreatePlayerContext createPlayer() {
			return GetRuleContext<CreatePlayerContext>(0);
		}
		public CreateDungeonContext createDungeon() {
			return GetRuleContext<CreateDungeonContext>(0);
		}
		public CreateEnemiesContext createEnemies() {
			return GetRuleContext<CreateEnemiesContext>(0);
		}
		public AddStartSegmentContext addStartSegment() {
			return GetRuleContext<AddStartSegmentContext>(0);
		}
		public AddFlatPathSegmentContext addFlatPathSegment() {
			return GetRuleContext<AddFlatPathSegmentContext>(0);
		}
		public AddLowPlatformSegmentContext addLowPlatformSegment() {
			return GetRuleContext<AddLowPlatformSegmentContext>(0);
		}
		public AddHighPlatformSegmentContext addHighPlatformSegment() {
			return GetRuleContext<AddHighPlatformSegmentContext>(0);
		}
		public AddPathGapSegmentContext addPathGapSegment() {
			return GetRuleContext<AddPathGapSegmentContext>(0);
		}
		public AddFinishLineSegmentContext addFinishLineSegment() {
			return GetRuleContext<AddFinishLineSegmentContext>(0);
		}
		public ElemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.EnterElem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.ExitElem(this);
		}
	}

	[RuleVersion(0)]
	public ElemContext elem() {
		ElemContext _localctx = new ElemContext(Context, State);
		EnterRule(_localctx, 2, RULE_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INITIALISE:
				{
				State = 31; initialiseGame();
				}
				break;
			case GAMETYPE:
				{
				State = 32; defineGame();
				}
				break;
			case PC:
				{
				State = 33; createPlayer();
				}
				break;
			case DUNGEON:
				{
				State = 34; createDungeon();
				}
				break;
			case ATTACKSTYLE:
				{
				State = 35; createEnemies();
				}
				break;
			case START:
				{
				State = 36; addStartSegment();
				}
				break;
			case FLATPATH:
				{
				State = 37; addFlatPathSegment();
				}
				break;
			case LOWPLATFORM:
				{
				State = 38; addLowPlatformSegment();
				}
				break;
			case HIGHPLATFORM:
				{
				State = 39; addHighPlatformSegment();
				}
				break;
			case PATHGAP:
				{
				State = 40; addPathGapSegment();
				}
				break;
			case FINISHLINE:
				{
				State = 41; addFinishLineSegment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 44; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialiseGameContext : ParserRuleContext {
		public ITerminalNode INITIALISE() { return GetToken(proto101Parser.INITIALISE, 0); }
		public InitialiseGameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialiseGame; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.EnterInitialiseGame(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.ExitInitialiseGame(this);
		}
	}

	[RuleVersion(0)]
	public InitialiseGameContext initialiseGame() {
		InitialiseGameContext _localctx = new InitialiseGameContext(Context, State);
		EnterRule(_localctx, 4, RULE_initialiseGame);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(INITIALISE);
			 Compiler.InitialiseGame(); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefineGameContext : ParserRuleContext {
		public IToken _GAMETYPE;
		public IToken _SKILLLEVEL;
		public ITerminalNode GAMETYPE() { return GetToken(proto101Parser.GAMETYPE, 0); }
		public ITerminalNode SKILLLEVEL() { return GetToken(proto101Parser.SKILLLEVEL, 0); }
		public ITerminalNode DIFFICULTY() { return GetToken(proto101Parser.DIFFICULTY, 0); }
		public DefineGameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defineGame; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.EnterDefineGame(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.ExitDefineGame(this);
		}
	}

	[RuleVersion(0)]
	public DefineGameContext defineGame() {
		DefineGameContext _localctx = new DefineGameContext(Context, State);
		EnterRule(_localctx, 6, RULE_defineGame);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; _localctx._GAMETYPE = Match(GAMETYPE);
			State = 50; _localctx._SKILLLEVEL = Match(SKILLLEVEL);
			State = 51; Match(DIFFICULTY);
			 Compiler.DefineGame((_localctx._GAMETYPE!=null?_localctx._GAMETYPE.Text:null), (_localctx._SKILLLEVEL!=null?_localctx._SKILLLEVEL.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatePlayerContext : ParserRuleContext {
		public IToken _NUM;
		public ITerminalNode PC() { return GetToken(proto101Parser.PC, 0); }
		public ITerminalNode NUM() { return GetToken(proto101Parser.NUM, 0); }
		public CreatePlayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createPlayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.EnterCreatePlayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.ExitCreatePlayer(this);
		}
	}

	[RuleVersion(0)]
	public CreatePlayerContext createPlayer() {
		CreatePlayerContext _localctx = new CreatePlayerContext(Context, State);
		EnterRule(_localctx, 8, RULE_createPlayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; Match(PC);
			State = 55; _localctx._NUM = Match(NUM);
			 Compiler.CreatePlayer((_localctx._NUM!=null?_localctx._NUM.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDungeonContext : ParserRuleContext {
		public IToken _SIZE;
		public ITerminalNode DUNGEON() { return GetToken(proto101Parser.DUNGEON, 0); }
		public ITerminalNode SIZE() { return GetToken(proto101Parser.SIZE, 0); }
		public CreateDungeonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDungeon; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.EnterCreateDungeon(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.ExitCreateDungeon(this);
		}
	}

	[RuleVersion(0)]
	public CreateDungeonContext createDungeon() {
		CreateDungeonContext _localctx = new CreateDungeonContext(Context, State);
		EnterRule(_localctx, 10, RULE_createDungeon);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58; Match(DUNGEON);
			State = 59; _localctx._SIZE = Match(SIZE);
			 Compiler.CreateDungeon((_localctx._SIZE!=null?_localctx._SIZE.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateEnemiesContext : ParserRuleContext {
		public IToken _ATTACKSTYLE;
		public ITerminalNode ATTACKSTYLE() { return GetToken(proto101Parser.ATTACKSTYLE, 0); }
		public ITerminalNode ENEMY() { return GetToken(proto101Parser.ENEMY, 0); }
		public CreateEnemiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createEnemies; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.EnterCreateEnemies(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.ExitCreateEnemies(this);
		}
	}

	[RuleVersion(0)]
	public CreateEnemiesContext createEnemies() {
		CreateEnemiesContext _localctx = new CreateEnemiesContext(Context, State);
		EnterRule(_localctx, 12, RULE_createEnemies);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; _localctx._ATTACKSTYLE = Match(ATTACKSTYLE);
			State = 63; Match(ENEMY);
			 Compiler.CreateEnemy((_localctx._ATTACKSTYLE!=null?_localctx._ATTACKSTYLE.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddStartSegmentContext : ParserRuleContext {
		public ITerminalNode START() { return GetToken(proto101Parser.START, 0); }
		public AddStartSegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addStartSegment; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.EnterAddStartSegment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.ExitAddStartSegment(this);
		}
	}

	[RuleVersion(0)]
	public AddStartSegmentContext addStartSegment() {
		AddStartSegmentContext _localctx = new AddStartSegmentContext(Context, State);
		EnterRule(_localctx, 14, RULE_addStartSegment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; Match(START);
			 Compiler.CreatePathStart(); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddFlatPathSegmentContext : ParserRuleContext {
		public ITerminalNode FLATPATH() { return GetToken(proto101Parser.FLATPATH, 0); }
		public AddFlatPathSegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addFlatPathSegment; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.EnterAddFlatPathSegment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.ExitAddFlatPathSegment(this);
		}
	}

	[RuleVersion(0)]
	public AddFlatPathSegmentContext addFlatPathSegment() {
		AddFlatPathSegmentContext _localctx = new AddFlatPathSegmentContext(Context, State);
		EnterRule(_localctx, 16, RULE_addFlatPathSegment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(FLATPATH);
			 Compiler.CreateFlatPath(); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddLowPlatformSegmentContext : ParserRuleContext {
		public ITerminalNode LOWPLATFORM() { return GetToken(proto101Parser.LOWPLATFORM, 0); }
		public AddLowPlatformSegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addLowPlatformSegment; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.EnterAddLowPlatformSegment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.ExitAddLowPlatformSegment(this);
		}
	}

	[RuleVersion(0)]
	public AddLowPlatformSegmentContext addLowPlatformSegment() {
		AddLowPlatformSegmentContext _localctx = new AddLowPlatformSegmentContext(Context, State);
		EnterRule(_localctx, 18, RULE_addLowPlatformSegment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(LOWPLATFORM);
			 Compiler.CreateLowPlatform(); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddHighPlatformSegmentContext : ParserRuleContext {
		public ITerminalNode HIGHPLATFORM() { return GetToken(proto101Parser.HIGHPLATFORM, 0); }
		public AddHighPlatformSegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addHighPlatformSegment; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.EnterAddHighPlatformSegment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.ExitAddHighPlatformSegment(this);
		}
	}

	[RuleVersion(0)]
	public AddHighPlatformSegmentContext addHighPlatformSegment() {
		AddHighPlatformSegmentContext _localctx = new AddHighPlatformSegmentContext(Context, State);
		EnterRule(_localctx, 20, RULE_addHighPlatformSegment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75; Match(HIGHPLATFORM);
			 Compiler.CreateHighPlatform(); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddPathGapSegmentContext : ParserRuleContext {
		public ITerminalNode PATHGAP() { return GetToken(proto101Parser.PATHGAP, 0); }
		public AddPathGapSegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addPathGapSegment; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.EnterAddPathGapSegment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.ExitAddPathGapSegment(this);
		}
	}

	[RuleVersion(0)]
	public AddPathGapSegmentContext addPathGapSegment() {
		AddPathGapSegmentContext _localctx = new AddPathGapSegmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_addPathGapSegment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(PATHGAP);
			 Compiler.CreatePathGap(); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddFinishLineSegmentContext : ParserRuleContext {
		public ITerminalNode FINISHLINE() { return GetToken(proto101Parser.FINISHLINE, 0); }
		public AddFinishLineSegmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addFinishLineSegment; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.EnterAddFinishLineSegment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.ExitAddFinishLineSegment(this);
		}
	}

	[RuleVersion(0)]
	public AddFinishLineSegmentContext addFinishLineSegment() {
		AddFinishLineSegmentContext _localctx = new AddFinishLineSegmentContext(Context, State);
		EnterRule(_localctx, 24, RULE_addFinishLineSegment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(FINISHLINE);
			 Compiler.CreateFinishLine(); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x18', 'W', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\x6', '\x2', '\x1E', '\n', '\x2', '\r', '\x2', '\xE', 
		'\x2', '\x1F', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '-', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x2', '\x2', '\xF', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x2', '\x2', '\x2', 'T', '\x2', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x4', ',', '\x3', '\x2', '\x2', '\x2', '\x6', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x33', '\x3', '\x2', '\x2', '\x2', '\n', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '\f', '<', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'@', '\x3', '\x2', '\x2', '\x2', '\x10', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x12', 'G', '\x3', '\x2', '\x2', '\x2', '\x14', 'J', '\x3', '\x2', 
		'\x2', '\x2', '\x16', 'M', '\x3', '\x2', '\x2', '\x2', '\x18', 'P', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', 'S', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x1E', '\x5', '\x4', '\x3', '\x2', '\x1D', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', ' ', '\x3', '\x2', '\x2', '\x2', ' ', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '!', '-', '\x5', '\x6', '\x4', '\x2', '\"', 
		'-', '\x5', '\b', '\x5', '\x2', '#', '-', '\x5', '\n', '\x6', '\x2', '$', 
		'-', '\x5', '\f', '\a', '\x2', '%', '-', '\x5', '\xE', '\b', '\x2', '&', 
		'-', '\x5', '\x10', '\t', '\x2', '\'', '-', '\x5', '\x12', '\n', '\x2', 
		'(', '-', '\x5', '\x14', '\v', '\x2', ')', '-', '\x5', '\x16', '\f', '\x2', 
		'*', '-', '\x5', '\x18', '\r', '\x2', '+', '-', '\x5', '\x1A', '\xE', 
		'\x2', ',', '!', '\x3', '\x2', '\x2', '\x2', ',', '\"', '\x3', '\x2', 
		'\x2', '\x2', ',', '#', '\x3', '\x2', '\x2', '\x2', ',', '$', '\x3', '\x2', 
		'\x2', '\x2', ',', '%', '\x3', '\x2', '\x2', '\x2', ',', '&', '\x3', '\x2', 
		'\x2', '\x2', ',', '\'', '\x3', '\x2', '\x2', '\x2', ',', '(', '\x3', 
		'\x2', '\x2', '\x2', ',', ')', '\x3', '\x2', '\x2', '\x2', ',', '*', '\x3', 
		'\x2', '\x2', '\x2', ',', '+', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', 
		'\x2', '\x2', '\x2', '.', '/', '\a', '\x17', '\x2', '\x2', '/', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\a', '\x3', '\x2', '\x2', 
		'\x31', '\x32', '\b', '\x4', '\x1', '\x2', '\x32', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '\x34', '\a', '\x4', '\x2', '\x2', '\x34', '\x35', 
		'\a', '\b', '\x2', '\x2', '\x35', '\x36', '\a', '\a', '\x2', '\x2', '\x36', 
		'\x37', '\b', '\x5', '\x1', '\x2', '\x37', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x39', '\a', '\x5', '\x2', '\x2', '\x39', ':', '\a', '\x6', 
		'\x2', '\x2', ':', ';', '\b', '\x6', '\x1', '\x2', ';', '\v', '\x3', '\x2', 
		'\x2', '\x2', '<', '=', '\a', '\n', '\x2', '\x2', '=', '>', '\a', '\r', 
		'\x2', '\x2', '>', '?', '\b', '\a', '\x1', '\x2', '?', '\r', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x41', '\a', '\xF', '\x2', '\x2', '\x41', '\x42', 
		'\a', '\xE', '\x2', '\x2', '\x42', '\x43', '\b', '\b', '\x1', '\x2', '\x43', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\a', '\x10', '\x2', 
		'\x2', '\x45', '\x46', '\b', '\t', '\x1', '\x2', '\x46', '\x11', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'H', '\a', '\x11', '\x2', '\x2', 'H', 'I', '\b', 
		'\n', '\x1', '\x2', 'I', '\x13', '\x3', '\x2', '\x2', '\x2', 'J', 'K', 
		'\a', '\x12', '\x2', '\x2', 'K', 'L', '\b', '\v', '\x1', '\x2', 'L', '\x15', 
		'\x3', '\x2', '\x2', '\x2', 'M', 'N', '\a', '\x13', '\x2', '\x2', 'N', 
		'O', '\b', '\f', '\x1', '\x2', 'O', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\a', '\x14', '\x2', '\x2', 'Q', 'R', '\b', '\r', '\x1', '\x2', 
		'R', '\x19', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', '\x15', '\x2', 
		'\x2', 'T', 'U', '\b', '\xE', '\x1', '\x2', 'U', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x1F', ',',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
