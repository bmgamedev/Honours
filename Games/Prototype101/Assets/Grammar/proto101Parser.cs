//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from proto101.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class proto101Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		PC=1, NUM=2, SKILL=3, MAP=4, SIZE=5, ENEMY=6, TYPE=7, INT=8, NEWLINE=9, 
		WS=10;
	public const int
		RULE_prog = 0, RULE_elem = 1, RULE_createPlayer = 2, RULE_createMap = 3, 
		RULE_createEnemies = 4;
	public static readonly string[] ruleNames = {
		"prog", "elem", "createPlayer", "createMap", "createEnemies"
	};

	private static readonly string[] _LiteralNames = {
		null, "'player'", null, null, "'map'", null, "'enemy'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "PC", "NUM", "SKILL", "MAP", "SIZE", "ENEMY", "TYPE", "INT", "NEWLINE", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "proto101.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static proto101Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


		public PrototypeCompiler Compiler = new PrototypeCompiler(); //this will be the compiler file in the Unity project

		public proto101Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public proto101Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		public ElemContext[] elem() {
			return GetRuleContexts<ElemContext>();
		}
		public ElemContext elem(int i) {
			return GetRuleContext<ElemContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 10; elem();
				}
				}
				State = 13;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PC) | (1L << MAP) | (1L << ENEMY))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElemContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(proto101Parser.NEWLINE, 0); }
		public CreatePlayerContext createPlayer() {
			return GetRuleContext<CreatePlayerContext>(0);
		}
		public CreateMapContext createMap() {
			return GetRuleContext<CreateMapContext>(0);
		}
		public CreateEnemiesContext createEnemies() {
			return GetRuleContext<CreateEnemiesContext>(0);
		}
		public ElemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.EnterElem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.ExitElem(this);
		}
	}

	[RuleVersion(0)]
	public ElemContext elem() {
		ElemContext _localctx = new ElemContext(Context, State);
		EnterRule(_localctx, 2, RULE_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PC:
				{
				State = 15; createPlayer();
				}
				break;
			case MAP:
				{
				State = 16; createMap();
				}
				break;
			case ENEMY:
				{
				State = 17; createEnemies();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 20; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatePlayerContext : ParserRuleContext {
		public IToken _NUM;
		public ITerminalNode PC() { return GetToken(proto101Parser.PC, 0); }
		public ITerminalNode NUM() { return GetToken(proto101Parser.NUM, 0); }
		public CreatePlayerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createPlayer; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.EnterCreatePlayer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.ExitCreatePlayer(this);
		}
	}

	[RuleVersion(0)]
	public CreatePlayerContext createPlayer() {
		CreatePlayerContext _localctx = new CreatePlayerContext(Context, State);
		EnterRule(_localctx, 4, RULE_createPlayer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; Match(PC);
			State = 23; _localctx._NUM = Match(NUM);
			 Compiler.CreatePlayer((_localctx._NUM!=null?_localctx._NUM.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateMapContext : ParserRuleContext {
		public IToken _SIZE;
		public ITerminalNode MAP() { return GetToken(proto101Parser.MAP, 0); }
		public ITerminalNode SIZE() { return GetToken(proto101Parser.SIZE, 0); }
		public CreateMapContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createMap; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.EnterCreateMap(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.ExitCreateMap(this);
		}
	}

	[RuleVersion(0)]
	public CreateMapContext createMap() {
		CreateMapContext _localctx = new CreateMapContext(Context, State);
		EnterRule(_localctx, 6, RULE_createMap);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; Match(MAP);
			State = 27; _localctx._SIZE = Match(SIZE);
			 Compiler.CreateMap((_localctx._SIZE!=null?_localctx._SIZE.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateEnemiesContext : ParserRuleContext {
		public IToken _TYPE;
		public IToken _NUM;
		public IToken _SKILL;
		public ITerminalNode ENEMY() { return GetToken(proto101Parser.ENEMY, 0); }
		public ITerminalNode TYPE() { return GetToken(proto101Parser.TYPE, 0); }
		public ITerminalNode NUM() { return GetToken(proto101Parser.NUM, 0); }
		public ITerminalNode SKILL() { return GetToken(proto101Parser.SKILL, 0); }
		public CreateEnemiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createEnemies; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.EnterCreateEnemies(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iproto101Listener typedListener = listener as Iproto101Listener;
			if (typedListener != null) typedListener.ExitCreateEnemies(this);
		}
	}

	[RuleVersion(0)]
	public CreateEnemiesContext createEnemies() {
		CreateEnemiesContext _localctx = new CreateEnemiesContext(Context, State);
		EnterRule(_localctx, 8, RULE_createEnemies);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; Match(ENEMY);
			State = 31; _localctx._TYPE = Match(TYPE);
			State = 32; _localctx._NUM = Match(NUM);
			State = 33; _localctx._SKILL = Match(SKILL);
			 Compiler.CreateEnemy((_localctx._TYPE!=null?_localctx._TYPE.Text:null), (_localctx._NUM!=null?_localctx._NUM.Text:null), (_localctx._SKILL!=null?_localctx._SKILL.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\f', '\'', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x3', '\x2', '\x6', '\x2', '\xE', '\n', '\x2', '\r', 
		'\x2', '\xE', '\x2', '\xF', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x15', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x2', 
		'\x2', '\a', '\x2', '\x4', '\x6', '\b', '\n', '\x2', '\x2', '\x2', '$', 
		'\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x4', '\x14', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\x18', '\x3', '\x2', '\x2', '\x2', '\b', '\x1C', 
		'\x3', '\x2', '\x2', '\x2', '\n', ' ', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\xE', '\x5', '\x4', '\x3', '\x2', '\r', '\f', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\xF', '\x3', '\x2', '\x2', '\x2', '\xF', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\xF', '\x10', '\x3', '\x2', '\x2', '\x2', '\x10', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x11', '\x15', '\x5', '\x6', '\x4', '\x2', '\x12', 
		'\x15', '\x5', '\b', '\x5', '\x2', '\x13', '\x15', '\x5', '\n', '\x6', 
		'\x2', '\x14', '\x11', '\x3', '\x2', '\x2', '\x2', '\x14', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x13', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'\x16', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\a', '\v', '\x2', 
		'\x2', '\x17', '\x5', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\a', 
		'\x3', '\x2', '\x2', '\x19', '\x1A', '\a', '\x4', '\x2', '\x2', '\x1A', 
		'\x1B', '\b', '\x4', '\x1', '\x2', '\x1B', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x1D', '\a', '\x6', '\x2', '\x2', '\x1D', '\x1E', '\a', 
		'\a', '\x2', '\x2', '\x1E', '\x1F', '\b', '\x5', '\x1', '\x2', '\x1F', 
		'\t', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\a', '\b', '\x2', '\x2', 
		'!', '\"', '\a', '\t', '\x2', '\x2', '\"', '#', '\a', '\x4', '\x2', '\x2', 
		'#', '$', '\a', '\x5', '\x2', '\x2', '$', '%', '\b', '\x6', '\x1', '\x2', 
		'%', '\v', '\x3', '\x2', '\x2', '\x2', '\x4', '\xF', '\x14',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
