//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DungeonMap.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

#pragma warning disable 3021
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class DungeonMapParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INITROOM=1, ENTRY=2, EXIT=3, DIRECTION=4, ROOM=5, INT=6, NEWLINE=7, WS=8;
	public const int
		RULE_prog = 0, RULE_elem = 1, RULE_createFirstCorrSect = 2, RULE_createSecondCorrSect = 3, 
		RULE_createRoom = 4;
	public static readonly string[] ruleNames = {
		"prog", "elem", "createFirstCorrSect", "createSecondCorrSect", "createRoom"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'r'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INITROOM", "ENTRY", "EXIT", "DIRECTION", "ROOM", "INT", "NEWLINE", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DungeonMap.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DungeonMapParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


		public DungeonCompiler Compiler = new DungeonCompiler(); //this will be the compiler file in the Unity project

		public DungeonMapParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DungeonMapParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		public ElemContext[] elem() {
			return GetRuleContexts<ElemContext>();
		}
		public ElemContext elem(int i) {
			return GetRuleContext<ElemContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDungeonMapListener typedListener = listener as IDungeonMapListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDungeonMapListener typedListener = listener as IDungeonMapListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 10; elem();
				}
				}
				State = 13;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ENTRY) | (1L << EXIT) | (1L << DIRECTION))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElemContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(DungeonMapParser.NEWLINE, 0); }
		public CreateFirstCorrSectContext createFirstCorrSect() {
			return GetRuleContext<CreateFirstCorrSectContext>(0);
		}
		public CreateSecondCorrSectContext createSecondCorrSect() {
			return GetRuleContext<CreateSecondCorrSectContext>(0);
		}
		public CreateRoomContext createRoom() {
			return GetRuleContext<CreateRoomContext>(0);
		}
		public ElemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDungeonMapListener typedListener = listener as IDungeonMapListener;
			if (typedListener != null) typedListener.EnterElem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDungeonMapListener typedListener = listener as IDungeonMapListener;
			if (typedListener != null) typedListener.ExitElem(this);
		}
	}

	[RuleVersion(0)]
	public ElemContext elem() {
		ElemContext _localctx = new ElemContext(Context, State);
		EnterRule(_localctx, 2, RULE_elem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENTRY:
				{
				State = 15; createFirstCorrSect();
				}
				break;
			case DIRECTION:
				{
				State = 16; createSecondCorrSect();
				}
				break;
			case EXIT:
				{
				State = 17; createRoom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 20; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateFirstCorrSectContext : ParserRuleContext {
		public ITerminalNode ENTRY() { return GetToken(DungeonMapParser.ENTRY, 0); }
		public ITerminalNode DIRECTION() { return GetToken(DungeonMapParser.DIRECTION, 0); }
		public CreateFirstCorrSectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createFirstCorrSect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDungeonMapListener typedListener = listener as IDungeonMapListener;
			if (typedListener != null) typedListener.EnterCreateFirstCorrSect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDungeonMapListener typedListener = listener as IDungeonMapListener;
			if (typedListener != null) typedListener.ExitCreateFirstCorrSect(this);
		}
	}

	[RuleVersion(0)]
	public CreateFirstCorrSectContext createFirstCorrSect() {
		CreateFirstCorrSectContext _localctx = new CreateFirstCorrSectContext(Context, State);
		EnterRule(_localctx, 4, RULE_createFirstCorrSect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; Match(ENTRY);
			State = 23; Match(DIRECTION);
			 Compiler.CreateFirstPiece(); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateSecondCorrSectContext : ParserRuleContext {
		public ITerminalNode DIRECTION() { return GetToken(DungeonMapParser.DIRECTION, 0); }
		public ITerminalNode EXIT() { return GetToken(DungeonMapParser.EXIT, 0); }
		public CreateSecondCorrSectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createSecondCorrSect; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDungeonMapListener typedListener = listener as IDungeonMapListener;
			if (typedListener != null) typedListener.EnterCreateSecondCorrSect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDungeonMapListener typedListener = listener as IDungeonMapListener;
			if (typedListener != null) typedListener.ExitCreateSecondCorrSect(this);
		}
	}

	[RuleVersion(0)]
	public CreateSecondCorrSectContext createSecondCorrSect() {
		CreateSecondCorrSectContext _localctx = new CreateSecondCorrSectContext(Context, State);
		EnterRule(_localctx, 6, RULE_createSecondCorrSect);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26; Match(DIRECTION);
			State = 27; Match(EXIT);
			 Compiler.CreateSecondPiece(); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateRoomContext : ParserRuleContext {
		public ITerminalNode EXIT() { return GetToken(DungeonMapParser.EXIT, 0); }
		public ITerminalNode ROOM() { return GetToken(DungeonMapParser.ROOM, 0); }
		public ITerminalNode ENTRY() { return GetToken(DungeonMapParser.ENTRY, 0); }
		public CreateRoomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createRoom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IDungeonMapListener typedListener = listener as IDungeonMapListener;
			if (typedListener != null) typedListener.EnterCreateRoom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IDungeonMapListener typedListener = listener as IDungeonMapListener;
			if (typedListener != null) typedListener.ExitCreateRoom(this);
		}
	}

	[RuleVersion(0)]
	public CreateRoomContext createRoom() {
		CreateRoomContext _localctx = new CreateRoomContext(Context, State);
		EnterRule(_localctx, 8, RULE_createRoom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; Match(EXIT);
			State = 31; Match(ROOM);
			State = 32; Match(ENTRY);
			 Compiler.CreateRoom(); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\n', '&', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x3', '\x2', '\x6', '\x2', '\xE', '\n', '\x2', '\r', '\x2', 
		'\xE', '\x2', '\xF', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x15', '\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x2', '\x2', '\a', '\x2', '\x4', 
		'\x6', '\b', '\n', '\x2', '\x2', '\x2', '#', '\x2', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x14', '\x3', '\x2', '\x2', '\x2', '\x6', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'\n', ' ', '\x3', '\x2', '\x2', '\x2', '\f', '\xE', '\x5', '\x4', '\x3', 
		'\x2', '\r', '\f', '\x3', '\x2', '\x2', '\x2', '\xE', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\xF', '\r', '\x3', '\x2', '\x2', '\x2', '\xF', '\x10', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x11', '\x15', '\x5', '\x6', '\x4', '\x2', '\x12', '\x15', '\x5', '\b', 
		'\x5', '\x2', '\x13', '\x15', '\x5', '\n', '\x6', '\x2', '\x14', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x13', '\x3', '\x2', '\x2', '\x2', '\x15', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x17', '\a', '\t', '\x2', '\x2', '\x17', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\a', '\x4', '\x2', '\x2', 
		'\x19', '\x1A', '\a', '\x6', '\x2', '\x2', '\x1A', '\x1B', '\b', '\x4', 
		'\x1', '\x2', '\x1B', '\a', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', 
		'\a', '\x6', '\x2', '\x2', '\x1D', '\x1E', '\a', '\x5', '\x2', '\x2', 
		'\x1E', '\x1F', '\b', '\x5', '\x1', '\x2', '\x1F', '\t', '\x3', '\x2', 
		'\x2', '\x2', ' ', '!', '\a', '\x5', '\x2', '\x2', '!', '\"', '\a', '\a', 
		'\x2', '\x2', '\"', '#', '\a', '\x4', '\x2', '\x2', '#', '$', '\b', '\x6', 
		'\x1', '\x2', '$', '\v', '\x3', '\x2', '\x2', '\x2', '\x4', '\xF', '\x14',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
